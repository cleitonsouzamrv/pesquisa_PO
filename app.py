# Importa√ß√£o de bibliotecas necess√°rias
import streamlit as st  # Framework principal para cria√ß√£o da interface web
import pandas as pd  # Manipula√ß√£o de dados
from PIL import Image  # Manipula√ß√£o de imagens
import base64  # Codifica√ß√£o/decodifica√ß√£o base64 (para comunica√ß√£o com GitHub)
import json  # Manipula√ß√£o de objetos JSON
import requests  # Realiza√ß√£o de requisi√ß√µes HTTP
import io  # Manipula√ß√£o de fluxos de dados bin√°rios
from datetime import datetime  # Manipula√ß√£o de datas e hor√°rios
from guia_lateral import mostrar_guia_lateral  # Fun√ß√£o personalizada para mostrar guia lateral

# =========================== CONFIGURA√á√ÉO DA P√ÅGINA ===========================

# Defini√ß√£o das configura√ß√µes da p√°gina web no Streamlit
st.set_page_config(
    page_title="Pesquisa: Ferramentas e Pain√©is",
    page_icon="logo_mrv_light.png",
    layout="wide"
)

# Configura√ß√£o da barra lateral
with st.sidebar:
    logo = Image.open("logo_mrv_light.png")  # Carrega a imagem do logo
    st.image(logo, width=240)  # Exibe o logo na barra lateral
    st.title("Planejamento Operacional")
    st.markdown("## üìù Levantamento de Ferramentas e Pain√©is")
    mostrar_guia_lateral()  # Exibe a guia lateral personalizada

# =========================== CONFIGURA√á√ÉO DO GITHUB ===========================

# Credenciais e informa√ß√µes do reposit√≥rio GitHub via secrets
GITHUB_TOKEN = st.secrets["github"]["token"]
GITHUB_USERNAME = st.secrets["github"]["username"]
REPO_NAME = st.secrets["github"]["repo"]
FILE_PATH = st.secrets["github"]["file_path"]
BRANCH = st.secrets["github"]["branch"]

# Cabe√ßalho de autentica√ß√£o para requisi√ß√µes √† API do GitHub
headers = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

# Fun√ß√£o para carregar a planilha existente no reposit√≥rio do GitHub
def carregar_planilha_do_github():
    url = f"https://api.github.com/repos/{GITHUB_USERNAME}/{REPO_NAME}/contents/{FILE_PATH}?ref={BRANCH}"
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        content = base64.b64decode(r.json()["content"])
        return pd.read_excel(io.BytesIO(content)), r.json()["sha"]
    else:
        return pd.DataFrame(), None

# Fun√ß√£o para salvar a planilha atualizada de volta ao GitHub
def salvar_planilha_no_github(df, sha):
    output = io.BytesIO()
    df.to_excel(output, index=False)
    content_encoded = base64.b64encode(output.getvalue()).decode("utf-8")
    url = f"https://api.github.com/repos/{GITHUB_USERNAME}/{REPO_NAME}/contents/{FILE_PATH}"
    data = {
        "message": "Atualizando base de dados da pesquisa via Streamlit",
        "content": content_encoded,
        "branch": BRANCH,
        "sha": sha
    }
    response = requests.put(url, headers=headers, data=json.dumps(data))
    return response.status_code in [200, 201]

# =========================== FORMUL√ÅRIO PRINCIPAL ===========================

# T√≠tulo e instru√ß√µes
st.title("Pesquisa: Ferramentas e Pain√©is utilizados pela Equipe de Planejamento Operacional")
st.markdown(
    "Preencha as informa√ß√µes abaixo sobre os pain√©is e ferramentas que voc√™ utiliza no seu dia a dia.  \n"
    "Legenda: * Campos de preenchimento obrigat√≥rio."
)

# Campo de identifica√ß√£o do usu√°rio
st.subheader("üë§ Identifica√ß√£o do usu√°rio:")
email = st.text_input("Digite seu e-mail MRV (@mrv.com.br)*:")

# =========================== PAIN√âIS USADOS E FEEDBACKS ===========================

st.subheader("üìä Quais pain√©is abaixo voc√™ utiliza?")

paineis_lista = [
    "Painel An√°lises Forecast de Produ√ß√£o - PLNESROBR009",
    "Painel do Portif√≥lio - Planejamento da Produ√ß√£o - PLNESROBR004",
    "Painel Opera√ß√µes - Planejamento e Controle - PLNESROBR010",
    "Painel Produ√ß√£o Produtividade e MO - PLNESROBR005",
    "PAP - Dossi√™",
    "Painel AMP x PLS - CST002", 
    "Painel Acompanhamento de Concreto - ENGPDC032",
    "Painel Book Normas - ENGPDC018", 
    "Painel Cheque Obra - ENGPDC015",
    "Painel Cockpit Produ√ß√£o - ENGPDC010", 
    "Painel Comunica√ß√£o Integrada - ENGPDC028",
    "Painel Custos Produ√ß√£o - ENGPDC009", 
    "Painel de Materiais - ENGPDC005",
    "Painel Gest√£o de Acesso Obras - ENGPDC011", 
    "Painel Obra 360 - ENGPDC035",
    "Painel Performance da Produ√ß√£o - ENGPDC029", 
    "Painel Qualidade - ENGPDC007",
    "Painel SSMA Regionais - ENGPDC030", 
    "Relat√≥rio de M√©tricas de Pre√ßos e Servi√ßos - ENGPDC004",
    "Painel Gest√£o de Problema P√≥s Entrega - ASTTCN006",
    "Painel Vistoria da Qualidade - ASTTCN010"
]

# Multiselect para selecionar pain√©is utilizados
paineis_usados = st.multiselect("Selecione todos os pain√©is que voc√™ utiliza:* (Selecionar)", paineis_lista)

# Se√ß√£o de feedback sobre pain√©is
st.subheader("Avalie os pain√©is selecionados e deixe seu feedback:")

feedbacks = {}  # Dicion√°rio para armazenar os feedbacks e avalia√ß√µes

# Para cada painel selecionado, gera uma linha com: nome, nota, coment√°rio
for painel in paineis_usados:
    cols = st.columns([2, 1, 3])  # Dimensionar tamanho: Nome do painel | Nota | Coment√°rio

    with cols[0]:
        st.markdown(
            f"<span style='font-size:14px;'>{painel}</span>", 
            unsafe_allow_html=True
        )

    with cols[1]:
        nota = st.number_input(
            label="Nota (0-10)*",
            min_value=0,
            max_value=10,
            step=1,
            key=f"nota_{painel}"
        )

    with cols[2]:
        comentario = st.text_input(
            label="Coment√°rio (opcional)",
            placeholder="Escreva ou deixe em branco",
            key=f"comentario_{painel}"
        )

    # Armazena como dicion√°rio: {comentario: ..., nota: ...}
    feedbacks[painel] = {"comentario": comentario, "nota": nota}


# =========================== FERRAMENTAS ===========================

st.subheader("üîß Ferramentas que voc√™ utiliza")
if "ferramenta_count" not in st.session_state:
    st.session_state.ferramenta_count = 1  # Inicializa o contador de ferramentas

ferramentas = []  # Lista para armazenar as ferramentas como texto
ferramentas_resumo = []  # Lista para armazenar as ferramentas como dicion√°rio

# Lista de categorias para sele√ß√£o
categoria_lista = [
    "AUX√çLIO REGIONAL", "AMP X PLS", "DISCREP√ÇNCIA", "PROJECT",
    "ESTOQUE", "MOP/EMP", "CUSTOS", "REPLAN", "TURNOVER",
    "SEQUENCIAMENTO MO", "PRODUTIVIDADE", "HORAS EXTRAS", "OUTROS"
]

# Lista para armazenar √≠ndices que devem ser removidos
remover_indices = []

# Loop para criar campos din√¢micos de ferramentas
for i in range(st.session_state.ferramenta_count):
    st.markdown(f"---\n### Ferramenta {i+1}")
    
    linha1 = st.columns([3, 3])
    with linha1[0]:
        nome = st.text_input("Nome da Ferramenta* (Digitar)", key=f"nome_{i}")
    with linha1[1]:
        objetivo = st.text_input("Objetivo* (Digitar)", key=f"objetivo_{i}")

    linha2 = st.columns([2, 2, 2, 2])
    with linha2[0]:
        tipo = st.selectbox("Tipo* (Selecionar)", [
            "Power BI", "Excel", "Report e-mail", "Power Point",
            "Python", "SAP BO + Excel", "BIG + Excel", "Outra"
        ], key=f"tipo_{i}")
    with linha2[2]:
        importancia = st.selectbox("Import√¢ncia* (Selecionar)", [
            "üíé Muito Importante", "ü™ô Importante", "üü¢ Pouco Importante", "üü† N√£o Importante"
        ], key=f"importancia_{i}")
    with linha2[3]:
        horas = st.number_input("Horas gastas mensais* (Selecionar)", min_value=0.0, step=1.0, key=f"horas_{i}")
    with linha2[1]:
        categoria = st.selectbox("Categoria* (Selecionar)", categoria_lista, key=f"categoria_{i}")

    # Bot√£o de remo√ß√£o para esta ferramenta
    if st.button(f"üóëÔ∏è Remover Ferramenta {i+1}"):
        remover_indices.append(i)


    # Armazena a ferramenta preenchida
    if nome.strip():
        ferramenta_dict = {
            "Nome": nome,
            "Objetivo": objetivo,
            "Tipo": tipo,
            "Categoria": categoria,
            "Import√¢ncia": importancia,
            # ‚úÖ Aqui garantimos que sempre ser√° um float
            "Horas": float(horas) if isinstance(horas, (int, float)) else 0.0
        }
        ferramentas.append(json.dumps(ferramenta_dict, ensure_ascii=False))
        ferramentas_resumo.append(ferramenta_dict)



# Remove as ferramentas marcadas
if remover_indices:
    for idx in sorted(remover_indices, reverse=True):
        for key in ["nome_", "objetivo_", "tipo_", "categoria_", "importancia_", "horas_"]:
            st.session_state.pop(f"{key}{idx}", None)
    st.session_state.ferramenta_count -= len(remover_indices)
    st.rerun()

# Bot√£o para adicionar nova ferramenta
if st.button("‚ûï Adicionar nova Ferramenta"):
    st.session_state.ferramenta_count += 1
    st.rerun()


# =========================== ENVIO E SALVAMENTO ===========================

if st.button("üíæ Salvar e Enviar Resposta"):
    erros = []

    # Valida√ß√£o de campos obrigat√≥rios por ferramenta
    for idx, f in enumerate(ferramentas_resumo, 1):
        if not f["Nome"] or not str(f["Nome"]).strip():
            erros.append(f"- Nome da Ferramenta {idx} n√£o preenchido")
        if not f["Objetivo"] or not str(f["Objetivo"]).strip():
            erros.append(f"- Objetivo da Ferramenta {idx} n√£o preenchido")
        if not f["Tipo"] or f["Tipo"] == "Selecione":
            erros.append(f"- Tipo da Ferramenta {idx} n√£o selecionado")
        if not f["Categoria"] or f["Categoria"] == "Selecione":
            erros.append(f"- Categoria da Ferramenta {idx} n√£o selecionada")
        if not f["Import√¢ncia"] or f["Import√¢ncia"] == "Selecione":
            erros.append(f"- Import√¢ncia da Ferramenta {idx} n√£o selecionada")
        if f["Horas"] is None or f["Horas"] == "" or f["Horas"] == 0:
            erros.append(f"- Horas gastas da Ferramenta {idx} n√£o preenchidas ou igual a 0")

    # Exibe os erros e interrompe o fluxo
    if erros:
        st.error("Por favor, corrija os seguintes campos:\n" + "\n".join(erros))
    else:
        # Monta a nova resposta como dicion√°rio
        nova_resposta = {
            "E-mail MRV": email,
            "Data/Hora do Envio": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Pain√©is": "; ".join([f"{k}: {v}" for k, v in feedbacks.items()]),
            "Ferramentas": "; ".join(ferramentas)
        }

        df_novo = pd.DataFrame([nova_resposta])

        with st.spinner("Salvando resposta..."):
            df_existente, sha = carregar_planilha_do_github()

            if sha is None:
                st.error("‚ùå N√£o foi poss√≠vel carregar a planilha do GitHub.")
            else:
                df_total = pd.concat([df_existente, df_novo], ignore_index=True)
                sucesso = salvar_planilha_no_github(df_total, sha)

                if sucesso:
                    st.success("‚úÖ Resposta salva com sucesso. Agradecemos por sua contribui√ß√£o!")

                    st.markdown(
                        "<h3>‚ÑπÔ∏è Gentileza, na pasta abaixo, fa√ßa o upload das ferramentas que voc√™ citou:<br>"
                        "link da pasta: <a href='https://mrvengenhariasa.sharepoint.com/:f:/s/PlanejamentoEstratgicodeObra/EqCtBFyFlLhKuW3NbOqI4KEB8YLkiAUnAt7XtTX6ve3FJA?e=TI40We' target='_blank'>Clique aqui</a></h3>",
                        unsafe_allow_html=True
                    )

                    with st.expander("üîç Ver resumo do que foi enviado"):
                        st.markdown(f"**Email:** {email}")
                        st.markdown("**Pain√©is selecionados:**")
                        st.markdown(", ".join(paineis_usados) if paineis_usados else "_Nenhum painel selecionado_")
                        st.markdown("**Pain√©is comentados:**")
                        for painel, comentario in feedbacks.items():
                            st.markdown(f"- {painel}: {comentario}")
                        st.markdown("**Ferramentas preenchidas:**")
                        for idx, f in enumerate(ferramentas_resumo, 1):
                            st.markdown(
                                f"{idx}. {f['Nome']} - {f['Objetivo']} ({f['Tipo']}/{f['Categoria']}) ‚Ä¢ {f['Import√¢ncia']} ‚Ä¢ {f['Horas']}h/m√™s"
                            )

                    st.markdown("**Obrigado!**")

                    # Bot√£o para reiniciar o formul√°rio
                    if st.button("üîÑ Fazer nova pesquisa"):
                        # Reset das vari√°veis
                        st.session_state.ferramenta_count = 1

                        for i in range(0, 100):
                            st.session_state.pop(f"nome_{i}", None)
                            st.session_state.pop(f"objetivo_{i}", None)
                            st.session_state.pop(f"tipo_{i}", None)
                            st.session_state.pop(f"categoria_{i}", None)
                            st.session_state.pop(f"importancia_{i}", None)
                            st.session_state.pop(f"horas_{i}", None)

                        for painel in paineis_lista:
                            st.session_state.pop(f"nota_{painel}", None)
                            st.session_state.pop(f"comentario_{painel}", None)

                        # Tamb√©m limpar e-mail se quiser:
                        st.session_state.pop("email", None)

                        # For√ßar recarregamento com tudo limpo
                        st.experimental_rerun()

                else:
                    st.error("‚ùå Erro ao salvar a resposta no GitHub.")


